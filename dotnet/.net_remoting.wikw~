== .NET Rremoting ==
%% A framework for objects living in different AppDomain.

= Remoting Object Types =
* Server Activated Objects
  * Single call objects
  %% handles one and only one incoming request at a time, and doesn't hold any
  %% state information between calls
  %% A single call object is instantiated with every call, and then eventually
  %% destroyed by the garbage collector.
  * Singleton objects
  %% Single instance of object exists. Can be used in session-less and 
  %% session-oriented applications
  %% A singleton object is instantiated by the first call, and statys there
  %% until the last client releases it
* Client Activated Objects
%% a separate instance is created for each client, and remains in existence
%% until released by the client. Used in highly session-oriented applications.

= Hosting =
* In .NET exe or managed Windows Service
* In IIS (exposed as Web Service)

= Object Lifetime =
%% Lifetime fo objects are managed according to a process called leased-based
%% lifetime.
%% A lease is created for every object that also has a reference created outside
%% its host AppDomain.
%% Each AppDomain has a lease manager, which periodically checks the status of
%% all outstanding leases. Each lease has a lease time assiciated with it, and
%% when this time expires, the lease manager releases the object to be destroyed
%% by the garbage collector.



= Channels =
%% In .NET remoting, a transport mechanish is referred to as channel.
%% By default, you get two channels: 
* TCP/IP (with proprietary binary protocol) 
* HTTP

= Formatters and Serialization =
%% object to byte stream = serialization
%% byte to object = deserialization
%% Software that carries our serialization and deserialization = Formatter
%% .NET remoting comes with 2 formatters:
* Binary
* SOAP

= Marshaling =
%% To marshal an object means to make it available to be used, either remotely
%% or locally.
* mashal by reference (MBR)
%% remotely, a reference to it. Sitting on the server, awaiting your method call
* marshal by value (MBV)
%% pass an object from server to client or vice-versa. The object is
%% reinstantiated in a different AppDomain from where it started. 
%% It must be serializable.

= Client =
Transparent Proxy -> Real Proxy -> Formatter sink -> Other sinks -> Transport sink
%% whenever a client activates a remote object, two proxy object are created in
%% the client.
* Transparent Proxy
%% It is an exact copy of the remote object. It intercepts all the method calls
%% directed to the remote object, and passes these on to the real proxy.
* Real Proxy
%% The real proxy is never accessed directly, but it handles all outbound
%% communication. It passes the message on to the channel sink chain.

* Sink
%% A sink in an element of software that can receive something.

= Server =
-> Transport Sink -> Other Sinks -> Formatter sink -> Remote Object

%% A proxy object is a substitute for the real, remote object in the local
%% domain. It has the same methods and properties as the remote object. The only
%% difference is that it doesn't do anything. Actual work is done remotely.



= System.MarshalByRefObject =
%% If the object inherits from System.MarshalByRefObject, it is MBR, otherwise,
%% it is implicitly MBV.
* MBR Process
1. A serializable version of the remote object is created on host
2. serializable verion is passed along the remoting channel to client
3. serializable version is deserialized and parsed to create a transparent proxy,
   and housed inside a real proxy
%% The serialized version of object (created in step 1) is represented by
%% System.Runtime.Remoting.ObjRef. It stores all the relevant information to
%% create remote object proxies on the client side (like URL, type information)

